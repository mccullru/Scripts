
clc
clear

% Reads in multiple LiDAR files, creates a grid over each file with cells
% of a provided size, chooses one point at random within each cell, saves
% that point and its information, then saves the combination of all LiDAR
% files provided into one file. The purpose is to downsample the very large
% LiDAR files that will be used as reference data for creating SDB (for
% either calibration or accuracy checks) into fewer randomly chosen points
% that are equally distributed throughout the area. 



% % Define the input directory containing the LiDAR files
% inputFolder = "B:\Thesis Project\Reference Data\Hyannis Harbour, MA\2018";  % Change this to your actual folder path
% fileExtension = '*.txt';  % Specify the file extension of the LiDAR files
% 
% fileList = dir(fullfile(inputFolder, fileExtension));
% 
% 
% % Initialize a cell array to store all selected points
% allSelectedPoints = [];  % An empty array to hold all selected points
% 
% % Loop through each LiDAR file in the folder
% for i = 1:length(fileList)
%     tic
%     
%     % Construct the full file path
%     inputFile = fullfile(fileList(i).folder, fileList(i).name);
%     
%     % Read the LiDAR file, skipping the header (first row)
%     file = readmatrix(inputFile, 'NumHeaderLines', 1);
% 
%     % Extract X, Y, Z coordinates
%     X = file(:,1);
%     Y = file(:,2);
%     Z = file(:,3);
% 
%     % Define the grid cell size
%     cellSize = 100;
% 
%     % Determine the minimum and maximum X and Y values to set grid extents
%     minX = min(X);
%     maxX = max(X);
%     minY = min(Y);
%     maxY = max(Y);
% 
%     % Create the grid indices for each point
%     rowIndex = floor((X - minX) / cellSize) + 1;  % Row index based on X coordinates
%     colIndex = floor((Y - minY) / cellSize) + 1;  % Column index based on Y coordinates
% 
%     % Create a unique identifier for each grid cell
%     gridIDs = rowIndex + 1i * colIndex;  % Use complex numbers to combine row and col
% 
%     % Identify unique grid cells
%     uniqueGridIDs = unique(gridIDs);
% 
%     % Initialize an array to store the selected points for this file
%     selectedPoints = zeros(length(uniqueGridIDs), 3);
% 
%     % Loop over each grid cell and randomly select one point
%     for j = 1:length(uniqueGridIDs)
%         % Find points in the current grid cell
%         pointsInCell = (gridIDs == uniqueGridIDs(j));
% 
%         % Randomly select one point from the cell
%         pointIdx = find(pointsInCell);
%         randomIdx = pointIdx(randi(length(pointIdx)));  % Randomly select index
% 
%         % Store the selected point (X, Y, Z)
%         selectedPoints(j, :) = [X(randomIdx), Y(randomIdx), Z(randomIdx)];
%     end
% 
%     % Concatenate selected points from this file into the overall list
%     allSelectedPoints = [allSelectedPoints; selectedPoints];  % Combine points into a single array
% 
%     disp(['Processed file: ' inputFile]);
% 
%     toc
% end
% 
% % Clip all the points to selected goemetry
% 
% polygon = "B:\Thesis Project\AOIs\Hyannis Harbour, MA\HyannisAOI.geojson";
% 
% % Read the GeoJSON file
% geometry_Data = fileread(polygon);
% 
% % Parse the GeoJSON
% geojson = jsondecode(geometry_Data);
% 
% % Extract coordinates of the polygon (assuming one polygon in GeoJSON)
% polygonCoordinates = geojson.features.geometry.coordinates;
% 
% % Convert to X and Y arrays (adjust for nested arrays if needed)
% polygonX = polygonCoordinates(:,1);  % Extract X (longitude)
% polygonY = polygonCoordinates(:,2);  % Extract Y (latitude)
% 
% Easting = allSelectedPoints(:,1);
% Northing = allSelectedPoints(:,2);
% 
% [isInside, ~] = inpolygon(Easting, Northing, polygonX, polygonY);
% 
% clippedPoints = allSelectedPoints(isInside, :);
% 
% 
% 
% % Define the output file name for combined output
% outputFile = fullfile(inputFolder, 'combined_and_downsampled_points.csv');  % Output file name
% 
% % Write the header (assuming the original header is "X Y Z")
% header = {'Easting(m)', 'Northing(m)', 'Elevation(m)'};  % Modify this to match the header format in your input files
% 
% writematrix(allSelectedPoints, outputFile, 'WriteMode','overwrite','Delimiter', ',');
% 
% 
% % Open the output file for writing
% fileID = fopen(outputFile, 'r+');
% content = fread(fileID, '*char')';
% fseek(fileID, 0, 'bof');
% fprintf(fileID, '%s\n', strjoin(header, ','));  % Write the header to the file
% fwrite(fileID, content);
% fclose(fileID);
% 
% disp(['All selected points have been combined and saved to ' outputFile]);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%{
Splits data into a calibration dataset (70%) and an accuraccy assessment 
dataset (30%). Uses all input points, and places each point in a bin
which corresponds to a depth range so points are stratified. 
%}


% % Define the input folder containing the CSV files
% inputFolder = "E:\Thesis Stuff\ReferenceData\Topobathy";  
% 
% % Define the output folder
% outputFolder = "E:\Thesis Stuff\ReferenceData\Topobathy";  
% 
% % Get list of all CSV files in the folder
% fileList = dir(fullfile(inputFolder, '*.csv'));
% 
% % Loop through each file
% for k = 1:length(fileList)
%     % Read the CSV file
%     inputFile = fullfile(fileList(k).folder, fileList(k).name);
%     data = readmatrix(inputFile);
%     
%     % Extract columns (assuming order: Easting, Northing, Elevation)
%     Easting = data(:,1);
%     Northing = data(:,2);
%     Elevation = data(:,3);
%     
%     % Define number of bins (adjust based on depth range)
%     numBins = 10;  % Example: 10 bins
%     [~, edges] = histcounts(Elevation, numBins);  % Get bin edges
%     binIdx = discretize(Elevation, edges);  % Assign each point to a bin
%     
%     % Initialize training and calibration datasets
%     calData = [];
%     accData = [];
% 
%     % Stratified splitting: Loop through each depth bin
%     for i = 1:numBins
%         % Get indices of points in the current bin
%         binPoints = find(binIdx == i);
%         
%         % Shuffle indices to ensure randomness
%         binPoints = binPoints(randperm(length(binPoints)));
%         
%         % Determine split sizes (70% Accuracy, 30% Calibration)
%         numTrain = round(0.7 * length(binPoints));
%         
%         % Select points for each subset
%         calData = [calData; Easting(binPoints(1:numTrain)), Northing(binPoints(1:numTrain)), Elevation(binPoints(1:numTrain))];
%         accData = [accData; Easting(binPoints(numTrain+1:end)), Northing(binPoints(numTrain+1:end)), Elevation(binPoints(numTrain+1:end))];
%     end
%     
%     % Create new file names by appending suffixes
%     [~, baseName, ext] = fileparts(fileList(k).name);
%     calFileName = fullfile(outputFolder, [baseName, '_calibration_pts', ext]);
%     accFileName = fullfile(outputFolder, [baseName, '_accuracy_pts', ext]);
% 
%     % Save stratified datasets to CSV
%     writematrix(calData, calFileName);
%     writematrix(accData, accFileName);
%     
%     disp(['Processed file: ', fileList(k).name]);
% end
% 
% disp('Stratified splitting complete for all files: 70% Accuracy, 30% Calibration.');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Folder path containing LAS files
lasFolder = "B:\Thesis Project\Reference Data\Full_topo_data\Homer, Alaska\ITRF_EGM08\2019\las";


% --- ADDED: Define Rectangular AOI Bounding Box ---
% !!! REPLACE THESE VALUES WITH YOUR ACTUAL EXTENT COORDINATES !!!
 

% These coordinates MUST be in the same projected CRS as your LAS files.
% % Homer
% xmin_aoi = 576083; % Replace with your minimum Easting/X
% xmax_aoi = 585176; % Replace with your maximum Easting/X
% ymin_aoi = 6610194; % Replace with your minimum Northing/Y
% ymax_aoi = 6613556; % Replace with your maximum Northing/Y      

% Marathon
xmin_aoi = 492987; % Replace with your minimum Easting/X
xmax_aoi = 496807; % Replace with your maximum Easting/X
ymin_aoi = 2730923; % Replace with your minimum Northing/Y
ymax_aoi = 2734593; % Replace with your maximum Northing/Y
    

% % Hyannis
% xmin_aoi = 390098; % Replace with your minimum Easting/X
% xmax_aoi = 395013; % Replace with your maximum Easting/X
% ymin_aoi = 4606601; % Replace with your minimum Northing/Y
% ymax_aoi = 4610135; % Replace with your maximum Northing/Y

% Define the ROI for readPointCloud [xmin xmax ymin ymax zmin zmax]
% Use -Inf Inf for Z unless you also want to filter by elevation/depth
roi = [xmin_aoi xmax_aoi ymin_aoi ymax_aoi -Inf Inf];
disp('Using manually defined rectangular AOI for filtering.');
disp(['  Xmin: ', num2str(xmin_aoi), ', Xmax: ', num2str(xmax_aoi)]);
disp(['  Ymin: ', num2str(ymin_aoi), ', Ymax: ', num2str(ymax_aoi)]);


% Get list of all LAS files in the folder
lasFiles = dir(fullfile(lasFolder, '*.las'));
if isempty(lasFiles)
    error('No LAS files found in the specified folder: %s', lasFolder);
end
fprintf('Found %d LAS files in %s\n', length(lasFiles), lasFolder);

% Initialize an empty list to store all XYZ points *within the AOI*
allXYZ = [];

% Parameters
numBins = 10;       % Number of depth bins
cellSize = 10;     % 2D grid cell size in meters
splitRatio = 0.7;   % 70% calibration

% Loop through each LAS file and concatenate data *within ROI*
disp('Reading LAS files and filtering points by ROI...');
point_count_total = 0; % Optional: Count total points read before filter
point_count_aoi = 0;

% --- MODIFICATION: Initialize waitbar for LAS file processing ---
h_las_waitbar = waitbar(0, 'Processing LAS files... Please wait...');
% --- END MODIFICATION ---

for i = 1:length(lasFiles)
    
    % --- MODIFICATION: Update waitbar for LAS file processing ---
    waitbar(i/numLasFiles, h_las_waitbar, sprintf('Processing LAS file: %d/%d (%s)', i, numLasFiles, lasFiles(i).name));
    % --- END MODIFICATION ---
    
    lasFile = fullfile(lasFiles(i).folder, lasFiles(i).name);
    fprintf('Processing: %s\n', lasFiles(i).name);
    try
        reader = lasFileReader(lasFile);
        % Read only points within the defined ROI
        ptCloud = readPointCloud(reader, 'ROI', roi);

        point_count_total = point_count_total + reader.Count; % Count points in original file

        % Check if any points were found within the ROI for this file
        if ptCloud.Count > 0
            xyz = ptCloud.Location;  % Nx3 matrix: X, Y, Z (already filtered by ROI)
            allXYZ = [allXYZ; xyz];  % Concatenate filtered points
            points_added = ptCloud.Count;
            point_count_aoi = point_count_aoi + points_added;
            fprintf('  Added %d points from this file (within ROI).\n', points_added);
        % else % Optional message if file is completely outside ROI
             % fprintf('  No points found within ROI in this file.\n');
        end
    catch ME
        fprintf('  Error reading or processing file %s: %s\n', lasFiles(i).name, ME.message);
    end
end 

% --- MODIFICATION: Close the LAS processing waitbar ---
close(h_las_waitbar);
% --- END MODIFICATION ---


% Check if any data was loaded after ROI filtering ---
if isempty(allXYZ)
    error('No data points were found within the specified ROI in any of the processed LAS files.');
end
fprintf('\nTotal points read from all files (approx): %d\n', point_count_total); % Note: reader.Count might be approximate before full read
fprintf('Total points within specified ROI: %d\n', point_count_aoi);


% --- Extract X, Y, Z (These are now points ONLY within the AOI) ---
X = allXYZ(:,1);
Y = allXYZ(:,2);
Z = allXYZ(:,3);

% --- 2D Grid-Based Downsampling (Applied only to points within AOI) ---
disp('Performing 2D grid-based downsampling...');
% Compute min bounds based on filtered data
minX = min(X);
minY = min(Y);

% Convert coordinates to grid indices
rowIdx = floor((X - minX) / cellSize) + 1;
colIdx = floor((Y - minY) / cellSize) + 1;
gridIDs = rowIdx + 1i * colIdx;  % Complex numbers as unique IDs

% Unique cells
uniqueCells = unique(gridIDs);
numUniqueCells = length(uniqueCells);
downsampledXYZ = zeros(numUniqueCells, 3); % Preallocate

% --- MODIFICATION: Initialize waitbar for downsampling ---
h_downsample_waitbar = waitbar(0, 'Downsampling points per grid cell... Please wait...');
% --- END MODIFICATION ---


% Pick 1 random point per 2D cell
for j = 1:numUniqueCells
    
    % --- MODIFICATION: Update waitbar for downsampling ---
    if mod(j, 100) == 0 || j == numUniqueCells % Update every 100 cells or on the last cell
        waitbar(j/numUniqueCells, h_downsample_waitbar, sprintf('Downsampling cell: %d/%d', j, numUniqueCells));
    end
    % --- END MODIFICATION ---
    
    cellPointsIdx = find(gridIDs == uniqueCells(j));
    randIdx = cellPointsIdx(randi(length(cellPointsIdx)));
    downsampledXYZ(j, :) = allXYZ(randIdx, :);
end
fprintf('Downsampled to %d points (one per %d x %d m cell within AOI).\n', size(downsampledXYZ, 1), cellSize, cellSize);

% --- MODIFICATION: Close the downsampling waitbar ---
close(h_downsample_waitbar);
% --- END MODIFICATION ---


% --- Stratify by depth bins and split (Applied to downsampled AOI points) ---
disp('Stratifying downsampled points by depth and splitting...');
Z_down = downsampledXYZ(:,3);
valid_Z_down = Z_down(isfinite(Z_down)); % Use only finite values for binning
if isempty(valid_Z_down), error('No valid finite depth values after downsampling.'); end

% Calculate bins based on the range of valid downsampled depths
[~, binEdges] = histcounts(valid_Z_down, numBins);

% Ensure edges cover the full range
if length(binEdges) > 1
    binEdges(1) = -Inf; binEdges(end) = Inf;
else % Handle case where all points might be in one bin
    binEdges = [-Inf, Inf];
end
% Assign each point to a bin

binIdx = discretize(Z_down, binEdges);

% Initialize
calibrationPts = [];
validationPts = [];


% --- MODIFICATION: Initialize waitbar for stratification/splitting ---
h_stratify_waitbar = waitbar(0, 'Stratifying and splitting points... Please wait...');
% --- END MODIFICATION ---

% Loop through bins, shuffle points within bin, split according to ratio
for i = 1:numBins
    binPointsIdx = find(binIdx == i); % Indices (relative to downsampledXYZ) of points in this bin
    numInBin = length(binPointsIdx);
    if numInBin == 0, continue; end % Skip empty bins
    
    % Shuffle indices
    shuffledIdx = binPointsIdx(randperm(numInBin));
    
    % Calculate split point
    nCal = round(splitRatio * numInBin);
    
    % Ensure validation set gets at least one point if possible
    if nCal == numInBin && numInBin > 1
        nCal = nCal - 1;
    end
    
    % Get indices for each set
    calIdx = shuffledIdx(1:nCal);
    valIdx = shuffledIdx(nCal+1:end);
    
    % Add points to output arrays
    if ~isempty(calIdx), calibrationPts = [calibrationPts; downsampledXYZ(calIdx, :)]; end
    if ~isempty(valIdx), validationPts = [validationPts; downsampledXYZ(valIdx, :)]; end
end
fprintf('Split into %d calibration points and %d validation points.\n', size(calibrationPts, 1), size(validationPts, 1));

% --- Write output tables (Using original filenames) ---
disp('Writing output CSV files...');
calTable = array2table(calibrationPts, 'VariableNames', {'Easting', 'Northing', 'Geoid_Corrected_Ortho_Height'});
valTable = array2table(validationPts, 'VariableNames', {'Easting', 'Northing', 'Geoid_Corrected_Ortho_Height'});

% Output files saved in the original LAS folder
outputCalibFile = fullfile(lasFolder, 'calibration_points_dense.csv'); % Original name
outputValFile = fullfile(lasFolder, 'validation_points_dense.csv'); % Original name

writetable(calTable, outputCalibFile);
writetable(valTable, outputValFile);

disp('2D grid-based downsampling and stratified splitting complete (using manual AOI extent).');
disp(['Calibration points saved to: ', outputCalibFile]);
disp(['Validation points saved to: ', outputValFile]);













